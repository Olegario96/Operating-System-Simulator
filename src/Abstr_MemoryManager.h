/*
 * File:   MemoryManager.h
 * Authors: INSERT YOUR NAME HERE
 * Strategy: INSERT THE MEMORY MANAGEMENT SCHEMA HERE (THE ALGORITHM YOU ARE IMPLEMENTING -- RANDOMLY GENERATED BY MOODLE AS A VARIATION)
 *
 * Created on ...
 */

#ifndef MEMORYMANAGER_H
#define	MEMORYMANAGER_H

#include "Abstr_MemoryChunk.h"
#include "AllocationStrategy.h"

enum MemoryAllocationAlgorithm {FirstFit, NextFit, BestFit, WorstFit};

class MemoryManager {
    friend class ProblemTester;
public: // do not change
    MemoryManager();
    MemoryManager(const MemoryManager& orig);
    virtual ~MemoryManager();
public: // do not change

    MemoryChunk* allocateMemory(unsigned int size);
    void deallocateMemory(MemoryChunk* chunk);
    void showMemory();
    void showStatistics();
    unsigned int getNumMemoryChunks();
    MemoryChunk* getMemoryChunk(unsigned int index);
    void defragment();

    void setAllocationStrategy(AllocationStrategy * allocation){

      _allocation = allocation;
    }

    AllocationStrategy* getAllocationStrategy() {
        return _allocation;
    }

    double getFragmentationRate();
    double getOccupancyRate();
    double getAverageTimeDefragmentation();

    enum neighborsType {BothFree,NoFree,LeftFree,RightFree};

    struct AccountInformation {

        int _countNumberOfDefragmentations = 0;
        double timeSpentWithDefragmentation = 0.0;

    };
private: // do not change
    std::list<MemoryChunk*>* _chunks;
    unsigned int _memorySize;
    AccountInformation _accountInformation;
    AllocationStrategy * _allocation;


private: // private attributes and methods
    // INSERT YOUR CODE HERE
    // ...

};

#endif	/* MEMORYMANAGER_H */

